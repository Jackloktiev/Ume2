{"version":3,"sources":["components/chart.jsx","components/chartBox.jsx","components/header.jsx","components/footer.jsx","components/greeting.jsx","components/tile.jsx","components/menu.jsx","components/body.jsx","App.js","serviceWorker.js","index.js"],"names":["Chart","props","nutrient","paramNorm","useState","x","y","norm","setNorm","consumption","setConsumption","useEffect","a","async","fetch","username","method","result","json","body","console","log","fetchData","className","domainPadding","style","parent","backgroundColor","borderRadius","dependentAxis","crossAxis","orientation","axis","stroke","tickLabels","fill","tickFormat","axisLabelComponent","data","barWidth","title","charAt","toUpperCase","slice","centerTitle","border","fontSize","margin","labels","ChartBox","user","Header","Footer","year","Date","getFullYear","Greeting","Tile","Now","currDate","getMonth","getDate","fruit","src","imgUrl","alt","cal","fat","carbs","prot","action","type","name","value","Menu","setData","arr","setArr","prev","setPrev","prevRest","setPrevRest","rest","setRest","restClick","event","filtered","target","i","length","restaurant","push","map","logoUrl","onClick","placeholder","onChange","includes","caloriesPer100g","fatsPer100g","carbsPer100g","proteinsPer100g","imageUrl","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.953714f0.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryLine, VictoryLegend } from 'victory';\r\n\r\n  function Chart(props){\r\n    const nutrient = props.nutrient;\r\n    const paramNorm = nutrient + \"Norm\";\r\n\r\n    const [norm, setNorm] = useState(\r\n      [\r\n          {x:1, y:1000},\r\n          {x:2, y:1000},\r\n          {x:3, y:1000}\r\n      ]\r\n  );\r\n\r\n  const [consumption, setConsumption] = useState(\r\n      [\r\n          {x: 1, y: 0},\r\n          {x: 2, y: 2000},\r\n          {x: 3, y: 0}\r\n        ]\r\n  )\r\n\r\n  useEffect(() => {\r\n      const fetchData = async function(){\r\n          const result = await fetch(\"/userProfile/\"  + props.username,{\r\n              method:\"GET\"\r\n          });\r\n          const body = await result.json();\r\n          console.log(body);\r\n          setNorm(\r\n              [\r\n                  {x:1, y:body[paramNorm]},\r\n                  {x:2, y:body[paramNorm]},\r\n                  {x:3, y:body[paramNorm]}\r\n              ] \r\n          );\r\n          setConsumption(\r\n              [\r\n                  {x: 1, y: 0},\r\n                  {x: 2, y: body[nutrient]},\r\n                  {x: 3, y: 0}\r\n                ]  \r\n          )\r\n      }\r\n      fetchData();\r\n\r\n  },[nutrient,paramNorm]);\r\n\r\n      return(\r\n          <div className = \"chart\">\r\n\r\n          <VictoryChart\r\n            domainPadding={10}\r\n            style={{\r\n                parent:{backgroundColor:\"black\", borderRadius:\"5px\"}\r\n            }}\r\n          >\r\n\r\n          <VictoryAxis dependentAxis crossAxis\r\n            orientation = \"left\"\r\n            style = {{\r\n                axis:{stroke:\"white\"},\r\n                tickLabels:{fill:\"white\"}\r\n            }}\r\n           />\r\n          <VictoryAxis crossAxis\r\n            orientation = \"bottom\"\r\n            tickFormat={() => ''}\r\n            style = {{\r\n                axis:{stroke:\"white\"},\r\n                axisLabelComponent:{fill:\"white\"}\r\n            }}\r\n          />\r\n          <VictoryLine\r\n            data = {norm}\r\n            style={{\r\n              data:{stroke:\"red\"}\r\n              }}\r\n           />\r\n\r\n          <VictoryBar\r\n            data={consumption}\r\n            barWidth={30}\r\n            domainPadding = {0}\r\n            style={{\r\n              data:{fill:\"rgb(241,155,92\"}\r\n              }}\r\n            \r\n          />\r\n          <VictoryLegend x={0} y={0}\r\n            title={nutrient.charAt(0).toUpperCase() + nutrient.slice(1)}\r\n            centerTitle\r\n            orientation=\"horizontal\"\r\n            style={{ border: { fill: \"black\" }, title: {fill: \"white\", fontSize:15, margin:\"5px\" }, labels: { fill: \"black\" }, data: { fill: \"black\" } }}\r\n            \r\n          />        \r\n          </VictoryChart>\r\n          \r\n\r\n\r\n          </div>\r\n      )\r\n  }\r\nexport default Chart;\r\n","import React from 'react';\r\nimport Chart from \"./chart\";\r\n\r\nfunction ChartBox(props){\r\n    const user = props.user;\r\n\r\n\r\n    return(\r\n        <div className = \"chartWrap\" >\r\n        <div className = \"chart-box\">\r\n        <Chart username = {user} nutrient = \"calories\"/>\r\n        <Chart username = {user} nutrient = \"proteins\"/>\r\n        <Chart username = {user} nutrient = \"carbs\"/>\r\n        <Chart username = {user} nutrient = \"fats\"/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartBox;","import React from \"react\";\r\n\r\n\r\nfunction Header (){\r\n    return(\r\n        <div className = \"jumbotron header\">\r\n            <h1>Ume - Your nutrient tracking tool</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer (){\r\n    var year = new Date().getFullYear();\r\n    return (\r\n        <div className = \"footer\">\r\n            <p>This app is developed by Jack Loktiev &copy; {year}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction Greeting (){\r\n\r\n    return (\r\n        <div className = \"greeting\">\r\n            <h2>Hi, stranger</h2>\r\n            <p>With this app you can track your daily consumption of calories, proteins, carbs and fats. You can select the food from the list or the whole meal from the menu of the most popular restaurants in Canada. Easy enough, right?</p>\r\n            <p>Red horizontal lines on the charts are your daily norms. They are calculated based on your age, weight, height, gender and level of activity. But you have to consult with your health care practitioner to verify if those norms are right for your particular case.</p>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Greeting;","import React from 'react';\r\n\r\n\r\nfunction Tile (props){\r\n    const Now = new Date();\r\n    const currDate = Now.getMonth() + \"-\" + Now.getDate() + \"-\" + Now.getFullYear();\r\n    const title = props.fruit.charAt(0).toUpperCase() + props.fruit.slice(1);\r\n    return(\r\n        <div className=\"card tile\">\r\n        <img src={props.imgUrl} className=\"card-img-top tile-img\" alt=\"banana\"/>\r\n        <div className=\"card-body\">\r\n        <h5 className=\"card-title title\">{title}</h5>\r\n        <div className=\"card-text\">\r\n            <table>\r\n                <tr>\r\n                    <th>Calories</th>\r\n                    <th>{props.cal} cal</th>\r\n                    <td></td>\r\n                    <th>Fats</th>\r\n                    <th>{props.fat} g</th>\r\n                </tr>\r\n                <tr>\r\n                    <th>Carbs</th>\r\n                    <th>{props.carbs} g</th>\r\n                    <td></td>\r\n                    <th>Proteins</th>\r\n                    <th>{props.prot} g</th>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <form action = \"/consumed\" method = \"POST\" className = \"tileForm\">\r\n            <p>Amount of grams consumed:</p>\r\n            <input type = \"number\" name = \"quantity\"/>\r\n            <input type = \"number\" name = \"calories\" value = {props.cal} className = \"hidden\"/>\r\n            <input type = \"number\" name = \"fats\" value = {props.fat} className = \"hidden\"/>\r\n            <input type = \"number\" name = \"carbs\" value = {props.carbs} className = \"hidden\"/>\r\n            <input type = \"number\" name = \"proteins\" value = {props.prot} className = \"hidden\"/>\r\n            <input type = \"text\" name = \"date\" value = {currDate} className = \"hidden\"/>\r\n            <input type = \"text\" name = \"username\" value = {props.user} className = \"hidden\"/>\r\n            <input type=\"submit\" className=\"button\"/>\r\n        </form>\r\n        </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Tile;","import React, {useState, useEffect} from 'react';\r\nimport Tile from './tile';\r\n\r\n\r\n\r\n\r\n\r\nfunction Menu (props){\r\n    const [data, setData] = useState([]);\r\n    const [arr, setArr] = useState([]);\r\n    const [prev, setPrev] = useState();\r\n    const [prevRest, setPrevRest] = useState();\r\n    const [rest, setRest] = useState([]);\r\n    //--Get data on food items--\r\n    useEffect(() => {\r\n        const fetchData = async function(){\r\n            const result = await fetch(\"/getFood\",{\r\n                method:\"GET\"\r\n            });\r\n            const body = await result.json();\r\n            setData(body);\r\n            setArr(body);\r\n        }\r\n        fetchData();\r\n\r\n    },[]);\r\n\r\n    //Get list of restarants--\r\n    useEffect(() => {\r\n        const fetchData = async function(){\r\n            const result = await fetch(\"/getRestaurant\",{\r\n                method:\"GET\"\r\n            });\r\n            const body = await result.json();\r\n            setRest(body);\r\n        }\r\n        fetchData();\r\n\r\n    },[]);\r\n\r\n\r\n    function Search (event){\r\n        var filtered = [];\r\n        if(event.target.value.length > prev){\r\n            for(let i = 0;i<data.length;i++){\r\n                if(data[i].name.includes(event.target.value)){\r\n                    filtered.push(data[i]);\r\n                };\r\n            }\r\n            setPrev(event.target.value.length);\r\n        }else{\r\n            for(let i = 0;i<arr.length;i++){\r\n                if(arr[i].name.includes(event.target.value)){\r\n                    filtered.push(arr[i]);\r\n                };\r\n            }\r\n            setPrev(event.target.value.length);\r\n        }\r\n        setData(filtered);\r\n    }\r\n\r\n\r\n    function restClick (event){\r\n        var filtered = [];\r\n        if(event.target.name === prevRest){\r\n            for (var i = 0; i<data.length;i++){\r\n                if(data[i].restaurant === event.target.name){\r\n                    filtered.push(data[i]);\r\n                }\r\n            }\r\n        } else if (event.target.name === \"all\") {\r\n            filtered = arr;\r\n        } else {\r\n            for (let i = 0; i<arr.length;i++){\r\n                if(arr[i].restaurant === event.target.name){\r\n                    filtered.push(arr[i]);\r\n                }\r\n            }\r\n        }\r\n        setData(filtered);\r\n        setPrevRest(event.target.name);\r\n    }\r\n\r\n    return(\r\n        <div className = \"menu\">\r\n        {/* Restaurant filter */}\r\n        <div className = \"restBar\">\r\n            {rest.map(function(x){\r\n                return(\r\n                    <div>\r\n                        <img src={x.logoUrl} name = {x.name} className=\"rest-logo\" onClick = {restClick} alt = \"\"/>\r\n                    </div>\r\n                )\r\n            })}\r\n            \r\n        </div>\r\n        {/* Items filter     */}\r\n        <form>\r\n        <input type = \"text\" placeholder = \"Search...\" onChange = {Search} className = \"search\"/>\r\n        </form>\r\n\r\n        {/* Tiles */}\r\n        <div className = \"tileFlexContainer\">            \r\n        {data.map(function (x) {\r\n            //let url = ImageUrl(x.restaurant, x.name, x.imgUrl);\r\n            return (<Tile \r\n            fruit = {x.name}\r\n            cal = {x.caloriesPer100g}\r\n            fat = {x.fatsPer100g}\r\n            carbs = {x.carbsPer100g}\r\n            prot = {x.proteinsPer100g} \r\n            user = {props.user}\r\n            imgUrl = {x.imageUrl}\r\n            className = \"tile\"\r\n            />)\r\n        })}\r\n        </div>\r\n        </div>\r\n    );\r\n    \r\n\r\n};\r\n\r\nexport default Menu;","import React, {useState, useEffect} from 'react';\r\nimport ChartBox from \"./chartBox\";\r\nimport Header from \"./header\";\r\nimport Footer from \"./footer\";\r\nimport Greeting from \"./greeting\";\r\nimport Menu from \"./menu\";\r\nimport Navbar from \"./navbar\";\r\n\r\n\r\n\r\n\r\nfunction Body() {\r\n        let user = \"Jack_Loktiev\"\r\n        return(\r\n       <div>\r\n           <Header />\r\n           <Greeting />\r\n           <ChartBox user = {user}/>\r\n           <Menu user = {user}/>\r\n           <Footer />\r\n       </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport Body from \"./components/body\";\n\nfunction App (){\n\n    return(\n      <Body />\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}